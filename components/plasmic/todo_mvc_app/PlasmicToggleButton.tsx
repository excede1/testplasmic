// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f2b9DHN2DrvB6wFtHBQYGd
// Component: C39FfGXrmvxHq

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_todo_mvc_app.module.css"; // plasmic-import: f2b9DHN2DrvB6wFtHBQYGd/projectcss
import sty from "./PlasmicToggleButton.module.css"; // plasmic-import: C39FfGXrmvxHq/css

export type PlasmicToggleButton__VariantMembers = {
  state: "selected";
};
export type PlasmicToggleButton__VariantsArgs = {
  state?: SingleChoiceArg<"selected">;
};
type VariantPropType = keyof PlasmicToggleButton__VariantsArgs;
export const PlasmicToggleButton__VariantProps = new Array<VariantPropType>(
  "state"
);

export type PlasmicToggleButton__ArgsType = {
  children?: React.ReactNode;
  onClick?: () => void;
};
type ArgPropType = keyof PlasmicToggleButton__ArgsType;
export const PlasmicToggleButton__ArgProps = new Array<ArgPropType>(
  "children",
  "onClick"
);

export type PlasmicToggleButton__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultToggleButtonProps {
  children?: React.ReactNode;
  onClick?: () => void;
  state?: SingleChoiceArg<"selected">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicToggleButton__RenderFunc(props: {
  variants: PlasmicToggleButton__VariantsArgs;
  args: PlasmicToggleButton__ArgsType;
  overrides: PlasmicToggleButton__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "state",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.state
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries,
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootstate_selected]: hasVariant($state, "state", "selected") }
      )}
      onClick={async event => {
        const $steps = {};
        $steps["runOnClick"] = true
          ? (() => {
              const actionArgs = {
                eventRef: __wrapUserFunction(
                  {
                    type: "InteractionArgLoc",
                    actionName: "invokeEventHandler",
                    interactionUuid: "Fv2hvwGd5zORk",
                    componentUuid: "C39FfGXrmvxHq",
                    argName: "eventRef"
                  },
                  () => $props["onClick"]
                )
              };
              return __wrapUserFunction(
                {
                  type: "InteractionLoc",
                  actionName: "invokeEventHandler",
                  interactionUuid: "Fv2hvwGd5zORk",
                  componentUuid: "C39FfGXrmvxHq"
                },
                () =>
                  (({ eventRef, args }) => {
                    return eventRef?.(...(args ?? []));
                  })?.apply(null, [actionArgs]),
                actionArgs
              );
            })()
          : undefined;
        if (
          typeof $steps["runOnClick"] === "object" &&
          typeof $steps["runOnClick"].then === "function"
        ) {
          $steps["runOnClick"] = await __wrapUserPromise(
            {
              type: "InteractionLoc",
              actionName: "invokeEventHandler",
              interactionUuid: "Fv2hvwGd5zORk",
              componentUuid: "C39FfGXrmvxHq"
            },
            $steps["runOnClick"]
          );
        }
      }}
    >
      {p.renderPlasmicSlot({
        defaultContents: "All",
        value: args.children,
        className: classNames(sty.slotTargetChildren, {
          [sty.slotTargetChildrenstate_selected]: hasVariant(
            $state,
            "state",
            "selected"
          )
        })
      })}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicToggleButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicToggleButton__VariantsArgs;
    args?: PlasmicToggleButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicToggleButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicToggleButton__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicToggleButton__ArgProps,
          internalVariantPropNames: PlasmicToggleButton__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicToggleButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicToggleButton";
  } else {
    func.displayName = `PlasmicToggleButton.${nodeName}`;
  }
  return func;
}

export const PlasmicToggleButton = Object.assign(
  // Top-level PlasmicToggleButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicToggleButton
    internalVariantProps: PlasmicToggleButton__VariantProps,
    internalArgProps: PlasmicToggleButton__ArgProps
  }
);

export default PlasmicToggleButton;
/* prettier-ignore-end */
