// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f2b9DHN2DrvB6wFtHBQYGd
// Component: cUGICFLjdlozT

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  usePlasmicDataConfig,
  executePlasmicDataOp,
  usePlasmicDataOp
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: l4JHRTTG9DTqF/component
import Task from "../../Task"; // plasmic-import: nVFFxfuVMWqXx/component
import Footer from "../../Footer"; // plasmic-import: seGn4jU5MegYV/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: y_4LvMmuF4R_0/codeComponent

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: zjTf886GGOJ0x/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_todo_mvc_app.module.css"; // plasmic-import: f2b9DHN2DrvB6wFtHBQYGd/projectcss
import sty from "./PlasmicTodoApp.module.css"; // plasmic-import: cUGICFLjdlozT/css

export type PlasmicTodoApp__VariantMembers = {
  state: "empty";
};
export type PlasmicTodoApp__VariantsArgs = {
  state?: SingleChoiceArg<"empty">;
};
type VariantPropType = keyof PlasmicTodoApp__VariantsArgs;
export const PlasmicTodoApp__VariantProps = new Array<VariantPropType>("state");

export type PlasmicTodoApp__ArgsType = {};
type ArgPropType = keyof PlasmicTodoApp__ArgsType;
export const PlasmicTodoApp__ArgProps = new Array<ArgPropType>();

export type PlasmicTodoApp__OverridesType = {
  root?: p.Flex<"div">;
  appTitle?: p.Flex<"div">;
  appBody?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  tasksContainer?: p.Flex<"div">;
  task?: p.Flex<typeof Task>;
  footer?: p.Flex<typeof Footer>;
  fakeStack?: p.Flex<"div">;
};

export interface DefaultTodoAppProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTodoApp__RenderFunc(props: {
  variants: PlasmicTodoApp__VariantsArgs;
  args: PlasmicTodoApp__ArgsType;
  overrides: PlasmicTodoApp__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "state",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.state
      },
      {
        path: "footer.shownType",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries,
    $refs
  });

  const new$Queries = {
    tasks: usePlasmicDataOp(
      (() => {
        try {
          return {
            sourceId: "jHy7mK2fQEcUDtkpExinyy",
            opId: "a1ecf328-22ae-4837-a559-d42c2887d759",
            userArgs: {},
            cacheKey: "plasmic.$.FgZ7hoQuc-y4l.$.",
            invalidatedKeys: null,
            roleId: null
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          } else {
            throw e;
          }
        }
      })()
    )
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
  }

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root,
            {
              [sty.rootglobal_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              ),
              [sty.rootstate_empty]: hasVariant($state, "state", "empty")
            }
          )}
        >
          <div
            data-plasmic-name={"appTitle"}
            data-plasmic-override={overrides.appTitle}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.appTitle,
              {
                [sty.appTitleglobal_theme_dark]: hasVariant(
                  globalVariants,
                  "theme",
                  "dark"
                )
              }
            )}
          >
            {"todos"}
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__x3UdF, {
              [sty.freeBoxglobal_theme_dark__x3UdFn2V9C]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              )
            })}
          >
            <div
              data-plasmic-name={"appBody"}
              data-plasmic-override={overrides.appBody}
              className={classNames(projectcss.all, sty.appBody, {
                [sty.appBodyglobal_theme_dark]: hasVariant(
                  globalVariants,
                  "theme",
                  "dark"
                )
              })}
            >
              <Header
                data-plasmic-name={"header"}
                data-plasmic-override={overrides.header}
                className={classNames("__wab_instance", sty.header, {
                  [sty.headerglobal_theme_dark]: hasVariant(
                    globalVariants,
                    "theme",
                    "dark"
                  ),
                  [sty.headerstate_empty]: hasVariant($state, "state", "empty")
                })}
                state={
                  hasVariant($state, "state", "empty")
                    ? ("empty" as const)
                    : undefined
                }
              />

              {(hasVariant($state, "state", "empty") ? false : true) ? (
                <div
                  data-plasmic-name={"tasksContainer"}
                  data-plasmic-override={overrides.tasksContainer}
                  className={classNames(projectcss.all, sty.tasksContainer, {
                    [sty.tasksContainerstate_empty]: hasVariant(
                      $state,
                      "state",
                      "empty"
                    )
                  })}
                >
                  {(
                    (() => {
                      try {
                        return $queries.tasks.data;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })() ?? []
                  ).map((currentItem, currentIndex) => (
                    <Task
                      data-plasmic-name={"task"}
                      data-plasmic-override={overrides.task}
                      className={classNames("__wab_instance", sty.task, {
                        [sty.taskglobal_theme_dark]: hasVariant(
                          globalVariants,
                          "theme",
                          "dark"
                        ),
                        [sty.taskstate_empty]: hasVariant(
                          $state,
                          "state",
                          "empty"
                        )
                      })}
                      key={currentIndex}
                      task={(() => {
                        try {
                          return currentItem;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  ))}
                </div>
              ) : null}
              {(hasVariant($state, "state", "empty") ? false : true) ? (
                <Footer
                  data-plasmic-name={"footer"}
                  data-plasmic-override={overrides.footer}
                  className={classNames("__wab_instance", sty.footer, {
                    [sty.footerstate_empty]: hasVariant(
                      $state,
                      "state",
                      "empty"
                    )
                  })}
                  onShownTypeChange={p.generateStateOnChangeProp($state, [
                    "footer",
                    "shownType"
                  ])}
                  state={
                    $queries.tasks?.data?.some(t => t.done)
                      ? "HasCompleted"
                      : undefined
                  }
                  tasks={(() => {
                    try {
                      return $queries.tasks.data;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />
              ) : null}
            </div>
            {(hasVariant($state, "state", "empty") ? false : true) ? (
              <div
                data-plasmic-name={"fakeStack"}
                data-plasmic-override={overrides.fakeStack}
                className={classNames(projectcss.all, sty.fakeStack, {
                  [sty.fakeStackstate_empty]: hasVariant(
                    $state,
                    "state",
                    "empty"
                  )
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__cKqbB, {
                    [sty.freeBoxglobal_theme_dark__cKqbBn2V9C]: hasVariant(
                      globalVariants,
                      "theme",
                      "dark"
                    )
                  })}
                />

                <div
                  className={classNames(projectcss.all, sty.freeBox__voch3, {
                    [sty.freeBoxglobal_theme_dark__voch3N2V9C]: hasVariant(
                      globalVariants,
                      "theme",
                      "dark"
                    )
                  })}
                />
              </div>
            ) : null}
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "appTitle",
    "appBody",
    "header",
    "tasksContainer",
    "task",
    "footer",
    "fakeStack"
  ],
  appTitle: ["appTitle"],
  appBody: ["appBody", "header", "tasksContainer", "task", "footer"],
  header: ["header"],
  tasksContainer: ["tasksContainer", "task"],
  task: ["task"],
  footer: ["footer"],
  fakeStack: ["fakeStack"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  appTitle: "div";
  appBody: "div";
  header: typeof Header;
  tasksContainer: "div";
  task: typeof Task;
  footer: typeof Footer;
  fakeStack: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTodoApp__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTodoApp__VariantsArgs;
    args?: PlasmicTodoApp__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTodoApp__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTodoApp__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicTodoApp__ArgProps,
          internalVariantPropNames: PlasmicTodoApp__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTodoApp__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTodoApp";
  } else {
    func.displayName = `PlasmicTodoApp.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <p.PlasmicPageGuard
      minRole={null}
      appId={"f2b9DHN2DrvB6wFtHBQYGd"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </p.PlasmicPageGuard>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "f2b9DHN2DrvB6wFtHBQYGd",
      host: "https://studio.plasmic.app"
    });

    return (
      <p.PlasmicDataSourceContextProvider
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </p.PlasmicDataSourceContextProvider>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicTodoApp = Object.assign(
  // Top-level PlasmicTodoApp renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    appTitle: makeNodeComponent("appTitle"),
    appBody: makeNodeComponent("appBody"),
    header: makeNodeComponent("header"),
    tasksContainer: makeNodeComponent("tasksContainer"),
    task: makeNodeComponent("task"),
    footer: makeNodeComponent("footer"),
    fakeStack: makeNodeComponent("fakeStack"),

    // Metadata about props expected for PlasmicTodoApp
    internalVariantProps: PlasmicTodoApp__VariantProps,
    internalArgProps: PlasmicTodoApp__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicTodoApp;
/* prettier-ignore-end */
