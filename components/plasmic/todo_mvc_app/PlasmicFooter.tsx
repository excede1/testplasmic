// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f2b9DHN2DrvB6wFtHBQYGd
// Component: seGn4jU5MegYV

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ToggleButton from "../../ToggleButton"; // plasmic-import: C39FfGXrmvxHq/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_todo_mvc_app.module.css"; // plasmic-import: f2b9DHN2DrvB6wFtHBQYGd/projectcss
import sty from "./PlasmicFooter.module.css"; // plasmic-import: seGn4jU5MegYV/css

export type PlasmicFooter__VariantMembers = {
  state: "hasCompleted" | "singularLeft" | "empty";
};
export type PlasmicFooter__VariantsArgs = {
  state?: MultiChoiceArg<"hasCompleted" | "singularLeft" | "empty">;
};
type VariantPropType = keyof PlasmicFooter__VariantsArgs;
export const PlasmicFooter__VariantProps = new Array<VariantPropType>("state");

export type PlasmicFooter__ArgsType = {
  tasks?: any;
  onShownTypeChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicFooter__ArgsType;
export const PlasmicFooter__ArgProps = new Array<ArgPropType>(
  "tasks",
  "onShownTypeChange"
);

export type PlasmicFooter__OverridesType = {
  footerContainer?: p.Flex<"div">;
};

export interface DefaultFooterProps {
  tasks?: any;
  onShownTypeChange?: (val: string) => void;
  state?: MultiChoiceArg<"hasCompleted" | "singularLeft" | "empty">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFooter__RenderFunc(props: {
  variants: PlasmicFooter__VariantsArgs;
  args: PlasmicFooter__ArgsType;
  overrides: PlasmicFooter__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "state",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.state
      },
      {
        path: "shownType",
        type: "readonly",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "all" as const,

        onChangeProp: "onShownTypeChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries,
    $refs
  });

  return (
    <div
      data-plasmic-name={"footerContainer"}
      data-plasmic-override={overrides.footerContainer}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.footerContainer
      )}
    >
      {(
        hasVariant($state, "state", "empty")
          ? false
          : hasVariant($state, "state", "singularLeft")
          ? true
          : hasVariant($state, "state", "hasCompleted")
          ? true
          : true
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__qyCbu, {
            [sty.freeBoxstate_empty__qyCbuow2U5]: hasVariant(
              $state,
              "state",
              "empty"
            ),
            [sty.freeBoxstate_hasCompleted__qyCbulySal]: hasVariant(
              $state,
              "state",
              "hasCompleted"
            ),
            [sty.freeBoxstate_singularLeft__qyCbUmxlM]: hasVariant(
              $state,
              "state",
              "singularLeft"
            )
          })}
        >
          {(hasVariant($state, "state", "singularLeft") ? true : true) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vlYlr,
                {
                  [sty.textstate_empty__vlYlrow2U5]: hasVariant(
                    $state,
                    "state",
                    "empty"
                  ),
                  [sty.textstate_hasCompleted__vlYlrlySal]: hasVariant(
                    $state,
                    "state",
                    "hasCompleted"
                  ),
                  [sty.textstate_singularLeft__vlYlRmxlM]: hasVariant(
                    $state,
                    "state",
                    "singularLeft"
                  )
                }
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.tasks.length === 1
                      ? "1 item left"
                      : `${$props.tasks.length} items left`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "N items left";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          ) : null}
        </div>
      ) : null}
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__wWlHf)}
      >
        <ToggleButton
          className={classNames("__wab_instance", sty.toggleButton__ftuOf)}
          onClick={async () => {
            const $steps = {};
            $steps["updateShownType"] = true
              ? (() => {
                  const actionArgs = {
                    variable: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariable",
                        interactionUuid: "qk-RMVrr--y79",
                        componentUuid: "seGn4jU5MegYV",
                        argName: "variable"
                      },
                      () => ({
                        objRoot: $state,
                        variablePath: ["shownType"]
                      })
                    ),
                    operation: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariable",
                        interactionUuid: "qk-RMVrr--y79",
                        componentUuid: "seGn4jU5MegYV",
                        argName: "operation"
                      },
                      () => 0
                    ),
                    value: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariable",
                        interactionUuid: "qk-RMVrr--y79",
                        componentUuid: "seGn4jU5MegYV",
                        argName: "value"
                      },
                      () => "all"
                    )
                  };
                  return __wrapUserFunction(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariable",
                      interactionUuid: "qk-RMVrr--y79",
                      componentUuid: "seGn4jU5MegYV"
                    },
                    () =>
                      (({ variable, value, startIndex, deleteCount }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        p.set(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]),
                    actionArgs
                  );
                })()
              : undefined;
            if (
              typeof $steps["updateShownType"] === "object" &&
              typeof $steps["updateShownType"].then === "function"
            ) {
              $steps["updateShownType"] = await __wrapUserPromise(
                {
                  type: "InteractionLoc",
                  actionName: "updateVariable",
                  interactionUuid: "qk-RMVrr--y79",
                  componentUuid: "seGn4jU5MegYV"
                },
                $steps["updateShownType"]
              );
            }
          }}
          state={$state.shownType === "all" ? "selected" : undefined}
        >
          {"All"}
        </ToggleButton>
        <ToggleButton
          className={classNames("__wab_instance", sty.toggleButton__zkpvw)}
          onClick={async () => {
            const $steps = {};
            $steps["updateShownType"] = true
              ? (() => {
                  const actionArgs = {
                    variable: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariable",
                        interactionUuid: "Ccn8osiSfe2y7",
                        componentUuid: "seGn4jU5MegYV",
                        argName: "variable"
                      },
                      () => ({
                        objRoot: $state,
                        variablePath: ["shownType"]
                      })
                    ),
                    operation: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariable",
                        interactionUuid: "Ccn8osiSfe2y7",
                        componentUuid: "seGn4jU5MegYV",
                        argName: "operation"
                      },
                      () => 0
                    ),
                    value: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariable",
                        interactionUuid: "Ccn8osiSfe2y7",
                        componentUuid: "seGn4jU5MegYV",
                        argName: "value"
                      },
                      () => "completed"
                    )
                  };
                  return __wrapUserFunction(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariable",
                      interactionUuid: "Ccn8osiSfe2y7",
                      componentUuid: "seGn4jU5MegYV"
                    },
                    () =>
                      (({ variable, value, startIndex, deleteCount }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        p.set(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]),
                    actionArgs
                  );
                })()
              : undefined;
            if (
              typeof $steps["updateShownType"] === "object" &&
              typeof $steps["updateShownType"].then === "function"
            ) {
              $steps["updateShownType"] = await __wrapUserPromise(
                {
                  type: "InteractionLoc",
                  actionName: "updateVariable",
                  interactionUuid: "Ccn8osiSfe2y7",
                  componentUuid: "seGn4jU5MegYV"
                },
                $steps["updateShownType"]
              );
            }
          }}
          state={$state.shownType === "completed" ? "selected" : undefined}
        >
          {"Completed"}
        </ToggleButton>
        <ToggleButton
          className={classNames("__wab_instance", sty.toggleButton__bAnLh)}
          onClick={async () => {
            const $steps = {};
            $steps["updateShownType"] = true
              ? (() => {
                  const actionArgs = {
                    variable: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariable",
                        interactionUuid: "HoUn6OCgPy4Gr",
                        componentUuid: "seGn4jU5MegYV",
                        argName: "variable"
                      },
                      () => ({
                        objRoot: $state,
                        variablePath: ["shownType"]
                      })
                    ),
                    operation: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariable",
                        interactionUuid: "HoUn6OCgPy4Gr",
                        componentUuid: "seGn4jU5MegYV",
                        argName: "operation"
                      },
                      () => 0
                    ),
                    value: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariable",
                        interactionUuid: "HoUn6OCgPy4Gr",
                        componentUuid: "seGn4jU5MegYV",
                        argName: "value"
                      },
                      () => "active"
                    )
                  };
                  return __wrapUserFunction(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariable",
                      interactionUuid: "HoUn6OCgPy4Gr",
                      componentUuid: "seGn4jU5MegYV"
                    },
                    () =>
                      (({ variable, value, startIndex, deleteCount }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        p.set(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]),
                    actionArgs
                  );
                })()
              : undefined;
            if (
              typeof $steps["updateShownType"] === "object" &&
              typeof $steps["updateShownType"].then === "function"
            ) {
              $steps["updateShownType"] = await __wrapUserPromise(
                {
                  type: "InteractionLoc",
                  actionName: "updateVariable",
                  interactionUuid: "HoUn6OCgPy4Gr",
                  componentUuid: "seGn4jU5MegYV"
                },
                $steps["updateShownType"]
              );
            }
          }}
          state={$state.shownType === "active" ? "selected" : undefined}
        >
          {"Active"}
        </ToggleButton>
      </p.Stack>
      {(hasVariant($state, "state", "hasCompleted") ? true : false) ? (
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__l97Wi,
            {
              [sty.textstate_hasCompleted__l97WiLySal]: hasVariant(
                $state,
                "state",
                "hasCompleted"
              )
            }
          )}
        >
          {"Clear completed"}
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  footerContainer: ["footerContainer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  footerContainer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooter__VariantsArgs;
    args?: PlasmicFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFooter__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFooter__ArgProps,
          internalVariantPropNames: PlasmicFooter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "footerContainer") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("footerContainer"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
